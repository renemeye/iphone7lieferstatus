// Generated by CoffeeScript 1.10.0
(function() {
  var background_color, border_color, colors, database, devices, load_order_date_selector, model_sorter, model_storage, model_type, models, nicer_date, order_dates, pad, prepare_week_table, print_footer, print_header, storages, stringify_model, ticket_dates, types,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  database = {};

  order_dates = [];

  ticket_dates = [];

  models = [];

  types = ['iPhone 7', 'iPhone 7 Plus'];

  colors = [
    {
      text: 'Diamantschwarz',
      background: '#000000',
      border: '#aaaaaa'
    }, {
      text: 'Schwarz',
      background: '#2E3034',
      border: '#aaaaaa'
    }, {
      text: 'Silber',
      background: '#D0D0D4',
      border: '#aaaaaa'
    }, {
      text: 'Gold',
      background: '#D4BBA3',
      border: '#aaaaaa'
    }, {
      text: 'RosÃ©gold',
      background: '#D0A8A0',
      border: '#aaaaaa'
    }
  ];

  storages = [
    {
      text: '32 GB',
      short_text: '32'
    }, {
      text: '128 GB',
      short_text: '128'
    }, {
      text: '256 GB',
      short_text: '256'
    }
  ];

  devices = {
    '99924964': {
      type: 1,
      storage: 1,
      color: 4
    },
    '99924969': {
      type: 1,
      storage: 1,
      color: 5
    },
    '99924966': {
      type: 1,
      storage: 1,
      color: 3
    },
    '99924982': {
      type: 1,
      storage: 1,
      color: 2
    },
    '99924986': {
      type: 1,
      storage: 2,
      color: 1
    },
    '99924980': {
      type: 1,
      storage: 2,
      color: 4
    },
    '99924971': {
      type: 1,
      storage: 2,
      color: 5
    },
    '99924967': {
      type: 1,
      storage: 2,
      color: 3
    },
    '99924984': {
      type: 1,
      storage: 2,
      color: 2
    },
    '99924987': {
      type: 1,
      storage: 3,
      color: 1
    },
    '99924965': {
      type: 1,
      storage: 3,
      color: 4
    },
    '99924985': {
      type: 1,
      storage: 3,
      color: 5
    },
    '99924981': {
      type: 1,
      storage: 3,
      color: 3
    },
    '99924968': {
      type: 1,
      storage: 3,
      color: 2
    },
    '99924972': {
      type: 2,
      storage: 1,
      color: 4
    },
    '99924994': {
      type: 2,
      storage: 1,
      color: 5
    },
    '99925000': {
      type: 2,
      storage: 1,
      color: 3
    },
    '99924976': {
      type: 2,
      storage: 1,
      color: 2
    },
    '99924977': {
      type: 2,
      storage: 2,
      color: 1
    },
    '99925011': {
      type: 2,
      storage: 2,
      color: 4
    },
    '99924963': {
      type: 2,
      storage: 2,
      color: 5
    },
    '99924990': {
      type: 2,
      storage: 2,
      color: 3
    },
    '99924974': {
      type: 2,
      storage: 2,
      color: 2
    },
    '99924979': {
      type: 2,
      storage: 3,
      color: 1
    },
    '99924973': {
      type: 2,
      storage: 3,
      color: 4
    },
    '99924962': {
      type: 2,
      storage: 3,
      color: 5
    },
    '99924975': {
      type: 2,
      storage: 3,
      color: 3
    },
    '99924993': {
      type: 2,
      storage: 3,
      color: 2
    }
  };

  model_type = function(model) {
    return types[devices[model].type - 1];
  };

  model_storage = function(model) {
    return storages[devices[model].storage - 1].text;
  };

  stringify_model = function(model) {
    var color, storage, type;
    type = model_type(model);
    color = colors[devices[model].color - 1];
    storage = storages[devices[model].storage - 1];
    return "" + storage.text;
  };

  background_color = function(model) {
    var color;
    color = colors[devices[model].color - 1];
    return color.background;
  };

  border_color = function(model) {
    var color;
    color = colors[devices[model].color - 1];
    return color.border;
  };

  model_sorter = function(x, y) {
    var color_diff, model_x, model_y, storage_diff, type_diff;
    model_x = devices[x];
    model_y = devices[y];
    type_diff = model_x.type - model_y.type;
    if (type_diff !== 0) {
      return type_diff;
    }
    storage_diff = model_x.storage - model_y.storage;
    if (storage_diff !== 0) {
      return storage_diff;
    }
    color_diff = model_x.color - model_y.color;
    if (color_diff !== 0) {
      return color_diff;
    }
    return 0;
  };

  pad = function(num, size) {
    var s;
    s = "000000000" + num;
    return s.substr(s.length - size);
  };

  Date.prototype.kalenderWoche = function() {
    var DonnerstagDat, DonnerstagKW, KW, KWJahr;
    DonnerstagDat = new Date(this.getTime() + (3 - ((this.getDay() + 6) % 7)) * 86400000);
    KWJahr = DonnerstagDat.getFullYear();
    DonnerstagKW = new Date(new Date(KWJahr, 0, 4).getTime() + (3 - ((new Date(KWJahr, 0, 4).getDay() + 6) % 7)) * 86400000);
    return KW = Math.floor(1.5 + (DonnerstagDat.getTime() - DonnerstagKW.getTime()) / 86400000 / 7);
  };

  nicer_date = function(date_string) {
    var date;
    date = new Date(date_string);
    return (pad(date.getDate(), 2)) + "." + (pad(date.getMonth() + 1, 2));
  };

  print_header = function() {
    var $header;
    $header = $("<tr><th>Premierenticket:</th><th colspan='" + models.length + "'>Lieferung in Wochen:</th></tr>");
    return $('table.show').append($header);
  };

  prepare_week_table = function() {
    var $row, current_kalenderwoche, i, j, k, len, len1, len2, model, order_date, results, shipping_in_weeks, shipping_text, ticket_date;
    current_kalenderwoche = (new Date()).kalenderWoche();
    results = [];
    for (i = 0, len = ticket_dates.length; i < len; i++) {
      ticket_date = ticket_dates[i];
      $row = $("<tr><th>" + (nicer_date(ticket_date)) + "</th></tr>");
      for (j = 0, len1 = models.length; j < len1; j++) {
        model = models[j];
        for (k = 0, len2 = order_dates.length; k < len2; k++) {
          order_date = order_dates[k];
          shipping_in_weeks = "?";
          try {
            shipping_text = database[ticket_date][order_date][model];
            shipping_in_weeks = parseInt(shipping_text.replace("KW ", "")) - current_kalenderwoche;
          } catch (undefined) {}
          $row.append("<td class='specific-order-date order-date-" + order_date + " " + ((shipping_text || "no-info").replace(" ", "")) + "'>" + shipping_in_weeks + "</td>");
        }
      }
      results.push($('table.show').append($row));
    }
    return results;
  };

  print_footer = function() {
    var $cell, $footer_color, $footer_storage, $footer_type, i, j, k, last_model_storage, last_model_type, len, len1, len2, model;
    $footer_type = $("<tr class='model_type'><th></th></tr>");
    last_model_type = null;
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      if (model_type(model) === last_model_type) {
        $cell = $footer_type.find("th:last-child");
        $cell.attr('colspan', parseInt($cell.attr('colspan')) + 1);
      } else {
        last_model_type = model_type(model);
        $footer_type.append($("<th colspan='1'>" + (model_type(model)) + "</th>"));
      }
    }
    $('table.show').append($footer_type);
    $footer_storage = $("<tr class='model_storage'><th></th></tr>");
    last_model_storage = null;
    for (j = 0, len1 = models.length; j < len1; j++) {
      model = models[j];
      if (model_storage(model) === last_model_storage) {
        $cell = $footer_storage.find("th:last-child");
        $cell.attr('colspan', parseInt($cell.attr('colspan')) + 1);
      } else {
        last_model_storage = model_storage(model);
        $footer_storage.append($("<th colspan='1'>" + (model_storage(model)) + "</th>"));
      }
    }
    $('table.show').append($footer_storage);
    $footer_color = $("<tr><th></th></tr>");
    for (k = 0, len2 = models.length; k < len2; k++) {
      model = models[k];
      $footer_color.append($("<th style='background-color:" + (background_color(model)) + "; color:white'>&nbsp;</th>"));
    }
    return $('table.show').append($footer_color);
  };

  load_order_date_selector = function() {
    var i, len, order_date;
    for (i = 0, len = order_dates.length; i < len; i++) {
      order_date = order_dates[i];
      $(".order_date_selector").append($("<li><a data-order-date='" + order_date + "' class='order_date' href='#'>" + (nicer_date(order_date)) + "</a></li>"));
    }
    $('.order_date').click(function(e) {
      e.preventDefault();
      order_date = $(this).data('order-date');
      $(".order_date_selector").find('li').removeClass('active');
      $(".order_date[data-order-date=" + order_date + "]").closest('li').addClass('active');
      $(".specific-order-date").css("display", "none");
      return $("td.order-date-" + order_date).css("display", "table-cell");
    });
    return $(".order_date_selector").find('li:nth-child(2) a').trigger('click');
  };

  jQuery(function($) {
    var base, i, info, len, model, name, name1, ref, ref1, ref2, shipping_infos;
    ref = data_with_ticket.data;
    for (model in ref) {
      shipping_infos = ref[model];
      if (indexOf.call(models, model) < 0) {
        models.push(model);
      }
      for (i = 0, len = shipping_infos.length; i < len; i++) {
        info = shipping_infos[i];
        if (ref1 = info.ticket_date, indexOf.call(ticket_dates, ref1) < 0) {
          ticket_dates.push(info.ticket_date);
        }
        if (ref2 = info.order_date, indexOf.call(order_dates, ref2) < 0) {
          order_dates.push(info.order_date);
        }
        database[name = info.ticket_date] || (database[name] = {});
        (base = database[info.ticket_date])[name1 = info.order_date] || (base[name1] = {});
        database[info.ticket_date][info.order_date][model] = info.shipping_text;
      }
    }
    order_dates = order_dates.sort();
    ticket_dates = ticket_dates.sort();
    models = models.sort(model_sorter);
    print_header();
    prepare_week_table();
    print_footer();
    return load_order_date_selector();
  });

}).call(this);
